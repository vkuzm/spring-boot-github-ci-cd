
name: Pipeline CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: 'spring-boot-ci-cd'
  JAVA_VERSION: '1.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 
    
    #1 Set up JDK
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
  
    #2 Run tests
    - name: Run tests
      run: mvn test
    
    #3 Cache sonar packages
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    #4 Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    #5 Analyze by SonarCube
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      
  build-and-deploy:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v2
    
    #1 Azure authentication
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    #2 Set up JDK
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    
    #3 Build the project
    - name: Build
      run: mvn package -Dmaven.test.skip=true
      
    #4 Build the docker container and puth to registry
    - name: Docker Build & Push to container registry
      run: |
        docker build . -t ${{ secrets.AZURE_REGISTRY_URL }}/springbootapp:${{ github.sha }}
        docker login ${{ secrets.AZURE_REGISTRY_URL }} -u ${{ secrets.AZURE_REGISTRY_USERNAME }} -p ${{ secrets.AZURE_REGISTRY_PASSWORD }} 
        docker push ${{ secrets.AZURE_REGISTRY_URL }}/springbootapp:${{ github.sha }} 
      
    #5 Deploy the docker container
    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }} 
        images: ${{ secrets.AZURE_REGISTRY_URL }}/springbootapp:${{ github.sha }}
        #startup-command: 'some command'    # Include start up command to start the app container
